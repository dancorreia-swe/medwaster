import { View, ScrollView } from "react-native";
import { Container } from "@/components/container";
import { useState, useRef, useEffect } from "react";
import {
  WikiHeader,
  WikiFilterTabs,
  WikiSearchBar,
  WikiArticlesList,
  CategoryFilterBottomSheet,
  type Article,
} from "@/features/wiki/components";
import { GestureHandlerRootView } from "react-native-gesture-handler";
import BottomSheet from "@gorhom/bottom-sheet";
import { useArticleStore } from "@/lib/stores/article-store";

type TabType = "todos" | "favoritos" | "lidos" | "categorias";

const articles: Article[] = [
  {
    id: "1",
    emoji: "üíâ",
    title: "Descarte de Perfurocortantes",
    description:
      "Guia completo sobre como descartar agulhas, seringas e outros materiais perfurocortantes de forma segura",
    level: "B√°sico",
    duration: "5 min",
  },
  {
    id: "2",
    emoji: "üß™",
    title: "Res√≠duos Qu√≠micos Hospitalares",
    description:
      "Aprenda a identificar e descartar corretamente res√≠duos qu√≠micos, reagentes e solventes usados em laborat√≥rios",
    level: "Intermedi√°rio",
    duration: "8 min",
  },
  {
    id: "3",
    emoji: "üé®",
    title: "Sistema de Cores para Descarte",
    description:
      "Entenda o c√≥digo de cores dos recipientes: vermelho, amarelo, branco, azul e suas aplica√ß√µes espec√≠ficas",
    level: "B√°sico",
    duration: "4 min",
  },
  {
    id: "4",
    emoji: "üíä",
    title: "Medicamentos Oncol√≥gicos",
    description:
      "Protocolos espec√≠ficos para descarte de medicamentos quimioter√°picos e citot√≥xicos de alta periculosidade",
    level: "Avan√ßado",
    duration: "10 min",
  },
  {
    id: "5",
    emoji: "ü¶†",
    title: "Res√≠duos Infectantes",
    description:
      "Como manusear e descartar materiais contaminados com agentes biol√≥gicos, sangue e fluidos corporais",
    level: "Intermedi√°rio",
    duration: "7 min",
  },
  {
    id: "6",
    emoji: "üìã",
    title: "Gerenciamento de Res√≠duos",
    description:
      "Plano completo de gerenciamento desde a segrega√ß√£o at√© o descarte final, conforme RDC 222/2018",
    level: "Avan√ßado",
    duration: "12 min",
  },
  {
    id: "7",
    emoji: "üß§",
    title: "EPIs para Descarte",
    description:
      "Equipamentos de prote√ß√£o individual necess√°rios para cada tipo de res√≠duo e situa√ß√£o de manuseio",
    level: "B√°sico",
    duration: "6 min",
  },
  {
    id: "8",
    emoji: "üö®",
    title: "Acidentes e Emerg√™ncias",
    description:
      "Procedimentos de emerg√™ncia para acidentes com materiais biol√≥gicos, qu√≠micos e perfurocortantes",
    level: "Intermedi√°rio",
    duration: "9 min",
  },
  {
    id: "9",
    emoji: "‚ö†Ô∏è",
    title: "Protocolo de Perfura√ß√£o Acidental",
    description:
      "Passo a passo para atendimento imediato em casos de perfura√ß√£o com agulhas contaminadas",
    level: "Intermedi√°rio",
    duration: "5 min",
  },
  {
    id: "10",
    emoji: "üß¨",
    title: "Descarte de Quimioter√°picos",
    description:
      "Normas espec√≠ficas para descarte seguro de medicamentos antineopl√°sicos e imunossupressores",
    level: "Avan√ßado",
    duration: "11 min",
  },
  {
    id: "11",
    emoji: "‚öóÔ∏è",
    title: "Neutraliza√ß√£o de Qu√≠micos",
    description:
      "T√©cnicas seguras para neutralizar √°cidos, bases e outras subst√¢ncias qu√≠micas antes do descarte",
    level: "Avan√ßado",
    duration: "9 min",
  },
  {
    id: "12",
    emoji: "üßπ",
    title: "Limpeza de Derramamentos",
    description:
      "Procedimentos de conten√ß√£o e limpeza de derramamentos de fluidos corporais e qu√≠micos",
    level: "Intermedi√°rio",
    duration: "7 min",
  },
];

export default function WikiScreen() {
  const [activeTab, setActiveTab] = useState<TabType>("todos");
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedLevels, setSelectedLevels] = useState<string[]>([]);
  const [selectedCategories, setSelectedCategories] = useState<string[]>([]);

  const { isRead, isFavorite, toggleFavorite } = useArticleStore();
  const bottomSheetRef = useRef<BottomSheet>(null);

  const handleLevelToggle = (level: string) => {
    setSelectedLevels((prev) =>
      prev.includes(level) ? prev.filter((l) => l !== level) : [...prev, level],
    );
  };

  const handleCategoryToggle = (category: string) => {
    const newCategories = selectedCategories.includes(category)
      ? selectedCategories.filter((c) => c !== category)
      : [...selectedCategories, category];

    setSelectedCategories(newCategories);

    if (newCategories.length > 0) {
      setActiveTab("categorias");
    }
  };

  const handleOpenCategories = () => {
    // If there are selected categories and we're already viewing them, open bottom sheet
    // Otherwise, always open bottom sheet to select categories
    if (activeTab === "categorias" && selectedCategories.length > 0) {
      bottomSheetRef.current?.expand();
    } else if (selectedCategories.length > 0) {
      // Just switch to categorias tab to view filtered results
      setActiveTab("categorias");
    } else {
      // No categories selected, open bottom sheet to select some
      bottomSheetRef.current?.expand();
    }
  };

  const handleFavoriteToggle = (articleId: string) => {
    toggleFavorite(articleId);
  };

  const filteredArticles = () => {
    if (activeTab === "favoritos") {
      return articles.filter((article) => isFavorite(article.id));
    }
    
    if (activeTab === "lidos") {
      return articles.filter((article) => isRead(article.id));
    }

    return articles;
  };

  useEffect(() => {
    if (selectedCategories.length === 0 && activeTab === "categorias") {
      setActiveTab("todos");
    }
  }, [selectedCategories, activeTab]);

  return (
    <GestureHandlerRootView style={{ flex: 1 }}>
      <Container className="flex-1 bg-gray-50">
        <ScrollView 
          className="flex-1" 
          showsVerticalScrollIndicator={false}
        >
          <View className="px-6 pt-4 pb-2">
            <WikiHeader />

            <WikiFilterTabs
              activeTab={activeTab}
              onTabChange={setActiveTab}
              onCategoriesPress={handleOpenCategories}
              selectedCategoriesCount={selectedCategories.length}
            />

            <WikiSearchBar
              value={searchQuery}
              onChangeText={setSearchQuery}
            />
          </View>

          <WikiArticlesList
            articles={filteredArticles()}
            onFavoriteToggle={handleFavoriteToggle}
          />
        </ScrollView>

        <CategoryFilterBottomSheet
          ref={bottomSheetRef}
          selectedLevels={selectedLevels}
          onLevelToggle={handleLevelToggle}
          selectedCategories={selectedCategories}
          onCategoryToggle={handleCategoryToggle}
        />
      </Container>
    </GestureHandlerRootView>
  );
}
