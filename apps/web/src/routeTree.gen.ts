/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ResetPasswordRouteImport } from './routes/reset-password'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ForgotPasswordRouteImport } from './routes/forgot-password'
import { Route as AccessDeniedRouteImport } from './routes/access-denied'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as AuthIndexRouteImport } from './routes/_auth/index'
import { Route as AuthWikiRouteRouteImport } from './routes/_auth/wiki/route'
import { Route as AuthTrailsIndexRouteImport } from './routes/_auth/trails/index'
import { Route as AuthTagsIndexRouteImport } from './routes/_auth/tags/index'
import { Route as AuthCategoriesIndexRouteImport } from './routes/_auth/categories/index'
import { Route as AuthAchievementsIndexRouteImport } from './routes/_auth/achievements/index'
import { Route as AuthWikiArticleIdIndexRouteImport } from './routes/_auth/wiki/$articleId/index'
import { Route as AuthAdminUsersIndexRouteImport } from './routes/_auth/admin/users/index'
import { Route as AuthAdminSettingsIndexRouteImport } from './routes/_auth/admin/settings/index'
import { Route as AuthAchievementsAchievementIdIndexRouteImport } from './routes/_auth/achievements/$achievementId/index'

const ResetPasswordRoute = ResetPasswordRouteImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ForgotPasswordRoute = ForgotPasswordRouteImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => rootRouteImport,
} as any)
const AccessDeniedRoute = AccessDeniedRouteImport.update({
  id: '/access-denied',
  path: '/access-denied',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthIndexRoute = AuthIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRoute,
} as any)
const AuthWikiRouteRoute = AuthWikiRouteRouteImport.update({
  id: '/wiki',
  path: '/wiki',
  getParentRoute: () => AuthRoute,
} as any)
const AuthTrailsIndexRoute = AuthTrailsIndexRouteImport.update({
  id: '/trails/',
  path: '/trails/',
  getParentRoute: () => AuthRoute,
} as any)
const AuthTagsIndexRoute = AuthTagsIndexRouteImport.update({
  id: '/tags/',
  path: '/tags/',
  getParentRoute: () => AuthRoute,
} as any)
const AuthCategoriesIndexRoute = AuthCategoriesIndexRouteImport.update({
  id: '/categories/',
  path: '/categories/',
  getParentRoute: () => AuthRoute,
} as any)
const AuthAchievementsIndexRoute = AuthAchievementsIndexRouteImport.update({
  id: '/achievements/',
  path: '/achievements/',
  getParentRoute: () => AuthRoute,
} as any)
const AuthWikiArticleIdIndexRoute = AuthWikiArticleIdIndexRouteImport.update({
  id: '/$articleId/',
  path: '/$articleId/',
  getParentRoute: () => AuthWikiRouteRoute,
} as any)
const AuthAdminUsersIndexRoute = AuthAdminUsersIndexRouteImport.update({
  id: '/admin/users/',
  path: '/admin/users/',
  getParentRoute: () => AuthRoute,
} as any)
const AuthAdminSettingsIndexRoute = AuthAdminSettingsIndexRouteImport.update({
  id: '/admin/settings/',
  path: '/admin/settings/',
  getParentRoute: () => AuthRoute,
} as any)
const AuthAchievementsAchievementIdIndexRoute =
  AuthAchievementsAchievementIdIndexRouteImport.update({
    id: '/achievements/$achievementId/',
    path: '/achievements/$achievementId/',
    getParentRoute: () => AuthRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/access-denied': typeof AccessDeniedRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/login': typeof LoginRoute
  '/reset-password': typeof ResetPasswordRoute
  '/wiki': typeof AuthWikiRouteRouteWithChildren
  '/': typeof AuthIndexRoute
  '/achievements': typeof AuthAchievementsIndexRoute
  '/categories': typeof AuthCategoriesIndexRoute
  '/tags': typeof AuthTagsIndexRoute
  '/trails': typeof AuthTrailsIndexRoute
  '/achievements/$achievementId': typeof AuthAchievementsAchievementIdIndexRoute
  '/admin/settings': typeof AuthAdminSettingsIndexRoute
  '/admin/users': typeof AuthAdminUsersIndexRoute
  '/wiki/$articleId': typeof AuthWikiArticleIdIndexRoute
}
export interface FileRoutesByTo {
  '/access-denied': typeof AccessDeniedRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/login': typeof LoginRoute
  '/reset-password': typeof ResetPasswordRoute
  '/wiki': typeof AuthWikiRouteRouteWithChildren
  '/': typeof AuthIndexRoute
  '/achievements': typeof AuthAchievementsIndexRoute
  '/categories': typeof AuthCategoriesIndexRoute
  '/tags': typeof AuthTagsIndexRoute
  '/trails': typeof AuthTrailsIndexRoute
  '/achievements/$achievementId': typeof AuthAchievementsAchievementIdIndexRoute
  '/admin/settings': typeof AuthAdminSettingsIndexRoute
  '/admin/users': typeof AuthAdminUsersIndexRoute
  '/wiki/$articleId': typeof AuthWikiArticleIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_auth': typeof AuthRouteWithChildren
  '/access-denied': typeof AccessDeniedRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/login': typeof LoginRoute
  '/reset-password': typeof ResetPasswordRoute
  '/_auth/wiki': typeof AuthWikiRouteRouteWithChildren
  '/_auth/': typeof AuthIndexRoute
  '/_auth/achievements/': typeof AuthAchievementsIndexRoute
  '/_auth/categories/': typeof AuthCategoriesIndexRoute
  '/_auth/tags/': typeof AuthTagsIndexRoute
  '/_auth/trails/': typeof AuthTrailsIndexRoute
  '/_auth/achievements/$achievementId/': typeof AuthAchievementsAchievementIdIndexRoute
  '/_auth/admin/settings/': typeof AuthAdminSettingsIndexRoute
  '/_auth/admin/users/': typeof AuthAdminUsersIndexRoute
  '/_auth/wiki/$articleId/': typeof AuthWikiArticleIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/access-denied'
    | '/forgot-password'
    | '/login'
    | '/reset-password'
    | '/wiki'
    | '/'
    | '/achievements'
    | '/categories'
    | '/tags'
    | '/trails'
    | '/achievements/$achievementId'
    | '/admin/settings'
    | '/admin/users'
    | '/wiki/$articleId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/access-denied'
    | '/forgot-password'
    | '/login'
    | '/reset-password'
    | '/wiki'
    | '/'
    | '/achievements'
    | '/categories'
    | '/tags'
    | '/trails'
    | '/achievements/$achievementId'
    | '/admin/settings'
    | '/admin/users'
    | '/wiki/$articleId'
  id:
    | '__root__'
    | '/_auth'
    | '/access-denied'
    | '/forgot-password'
    | '/login'
    | '/reset-password'
    | '/_auth/wiki'
    | '/_auth/'
    | '/_auth/achievements/'
    | '/_auth/categories/'
    | '/_auth/tags/'
    | '/_auth/trails/'
    | '/_auth/achievements/$achievementId/'
    | '/_auth/admin/settings/'
    | '/_auth/admin/users/'
    | '/_auth/wiki/$articleId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  AccessDeniedRoute: typeof AccessDeniedRoute
  ForgotPasswordRoute: typeof ForgotPasswordRoute
  LoginRoute: typeof LoginRoute
  ResetPasswordRoute: typeof ResetPasswordRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/reset-password': {
      id: '/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof ResetPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/forgot-password': {
      id: '/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof ForgotPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/access-denied': {
      id: '/access-denied'
      path: '/access-denied'
      fullPath: '/access-denied'
      preLoaderRoute: typeof AccessDeniedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/': {
      id: '/_auth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthIndexRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/wiki': {
      id: '/_auth/wiki'
      path: '/wiki'
      fullPath: '/wiki'
      preLoaderRoute: typeof AuthWikiRouteRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/trails/': {
      id: '/_auth/trails/'
      path: '/trails'
      fullPath: '/trails'
      preLoaderRoute: typeof AuthTrailsIndexRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/tags/': {
      id: '/_auth/tags/'
      path: '/tags'
      fullPath: '/tags'
      preLoaderRoute: typeof AuthTagsIndexRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/categories/': {
      id: '/_auth/categories/'
      path: '/categories'
      fullPath: '/categories'
      preLoaderRoute: typeof AuthCategoriesIndexRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/achievements/': {
      id: '/_auth/achievements/'
      path: '/achievements'
      fullPath: '/achievements'
      preLoaderRoute: typeof AuthAchievementsIndexRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/wiki/$articleId/': {
      id: '/_auth/wiki/$articleId/'
      path: '/$articleId'
      fullPath: '/wiki/$articleId'
      preLoaderRoute: typeof AuthWikiArticleIdIndexRouteImport
      parentRoute: typeof AuthWikiRouteRoute
    }
    '/_auth/admin/users/': {
      id: '/_auth/admin/users/'
      path: '/admin/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AuthAdminUsersIndexRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/admin/settings/': {
      id: '/_auth/admin/settings/'
      path: '/admin/settings'
      fullPath: '/admin/settings'
      preLoaderRoute: typeof AuthAdminSettingsIndexRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/achievements/$achievementId/': {
      id: '/_auth/achievements/$achievementId/'
      path: '/achievements/$achievementId'
      fullPath: '/achievements/$achievementId'
      preLoaderRoute: typeof AuthAchievementsAchievementIdIndexRouteImport
      parentRoute: typeof AuthRoute
    }
  }
}

interface AuthWikiRouteRouteChildren {
  AuthWikiArticleIdIndexRoute: typeof AuthWikiArticleIdIndexRoute
}

const AuthWikiRouteRouteChildren: AuthWikiRouteRouteChildren = {
  AuthWikiArticleIdIndexRoute: AuthWikiArticleIdIndexRoute,
}

const AuthWikiRouteRouteWithChildren = AuthWikiRouteRoute._addFileChildren(
  AuthWikiRouteRouteChildren,
)

interface AuthRouteChildren {
  AuthWikiRouteRoute: typeof AuthWikiRouteRouteWithChildren
  AuthIndexRoute: typeof AuthIndexRoute
  AuthAchievementsIndexRoute: typeof AuthAchievementsIndexRoute
  AuthCategoriesIndexRoute: typeof AuthCategoriesIndexRoute
  AuthTagsIndexRoute: typeof AuthTagsIndexRoute
  AuthTrailsIndexRoute: typeof AuthTrailsIndexRoute
  AuthAchievementsAchievementIdIndexRoute: typeof AuthAchievementsAchievementIdIndexRoute
  AuthAdminSettingsIndexRoute: typeof AuthAdminSettingsIndexRoute
  AuthAdminUsersIndexRoute: typeof AuthAdminUsersIndexRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthWikiRouteRoute: AuthWikiRouteRouteWithChildren,
  AuthIndexRoute: AuthIndexRoute,
  AuthAchievementsIndexRoute: AuthAchievementsIndexRoute,
  AuthCategoriesIndexRoute: AuthCategoriesIndexRoute,
  AuthTagsIndexRoute: AuthTagsIndexRoute,
  AuthTrailsIndexRoute: AuthTrailsIndexRoute,
  AuthAchievementsAchievementIdIndexRoute:
    AuthAchievementsAchievementIdIndexRoute,
  AuthAdminSettingsIndexRoute: AuthAdminSettingsIndexRoute,
  AuthAdminUsersIndexRoute: AuthAdminUsersIndexRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  AccessDeniedRoute: AccessDeniedRoute,
  ForgotPasswordRoute: ForgotPasswordRoute,
  LoginRoute: LoginRoute,
  ResetPasswordRoute: ResetPasswordRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
